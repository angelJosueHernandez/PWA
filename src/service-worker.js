import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, StaleWhileRevalidate, NetworkFirst } from 'workbox-strategies';
import { NetworkOnly } from 'workbox-strategies';
import { Queue } from 'workbox-background-sync';

// Precache all files generated by Vite
precacheAndRoute(self.__WB_MANIFEST);

// Cache HTML files (your main app files)
registerRoute(
  ({ request }) => request.destination === 'document',
  new StaleWhileRevalidate({
    cacheName: 'html-cache',
  })
);

// Cache CSS and JavaScript files
registerRoute(
  ({ request }) =>
    request.destination === 'script' || request.destination === 'style',
  new StaleWhileRevalidate({
    cacheName: 'assets-cache',
  })
);

// Cache images
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images-cache',
    plugins: [
      {
        cacheWillUpdate: async ({ response }) => {
          // Asegúrate de que la respuesta sea válida
          if (response && response.status === 200) {
            return response;
          }
          return null;
        },
      },
    ],
  })
);

// No cachear videos de YouTube, pero mostrar un fallback si está offline
registerRoute(
  ({ request }) => request.destination === 'video' && request.url.includes('youtube.com'),
  new NetworkOnly({
    cacheName: 'video-external-cache',
  })
);

// Mostrar un fallback cuando no hay conexión
self.addEventListener('fetch', (event) => {
  if (event.request.destination === 'video' && event.request.url.includes('youtube.com')) {
    event.respondWith(
      fetch(event.request).catch(() => {
        return new Response(
          'Video no disponible sin conexión. Por favor, conéctese a Internet para ver este contenido.',
          { headers: { 'Content-Type': 'text/plain' } }
        );
      })
    );
  }
});

// Cache other requests (e.g., API calls, etc.)
registerRoute(
  /.*/,
  new StaleWhileRevalidate({
    cacheName: 'all-resources-cache',
  })
);

// Escuchar el evento de sincronización de fondo para recachear cuando vuelva la conexión
self.addEventListener('sync', (event) => {
  if (event.tag === 'recache-pages') {
    event.waitUntil(recachePages());
  }
});

// Función para recachear las páginas al reconectar
async function recachePages() {
  const cache = await caches.open('html-cache');
  const pagesToCache = ['/offline-page1.html', '/offline-page2.html']; // Añade las rutas de las páginas que deseas recachear
  return Promise.all(
    pagesToCache.map(async (pageUrl) => {
      const response = await fetch(pageUrl);
      if (response.status === 200) {
        await cache.put(pageUrl, response);
      }
    })
  );
}

// Registrar el evento de sincronización de fondo cuando está offline
self.addEventListener('fetch', (event) => {
  if (!navigator.onLine && event.request.method === 'GET') {
    const bgSyncQueue = new Queue('recache-queue');
    bgSyncQueue.pushRequest({ request: event.request });
  }
});
