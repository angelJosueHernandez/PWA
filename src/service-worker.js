import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import {
  StaleWhileRevalidate,
  CacheFirst,
  NetworkFirst,
  NetworkOnly,
} from 'workbox-strategies'; // Añade NetworkOnly aquí
import { Queue } from 'workbox-background-sync';
import moment from 'moment-timezone';

// Precache all files generated by Vite
precacheAndRoute(self.__WB_MANIFEST || []);

// Cache HTML files (your main app files)
registerRoute(
  ({ request }) => request.destination === 'document',
  new StaleWhileRevalidate({
    cacheName: 'html-cache',
  }),
);

// Cache CSS and JavaScript files
registerRoute(
  ({ request }) =>
    request.destination === 'script' || request.destination === 'style',
  new StaleWhileRevalidate({
    cacheName: 'assets-cache',
  }),
);

// Cache images
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images-cache',
    plugins: [
      {
        cacheWillUpdate: async ({ response }) => {
          // Asegúrate de que la respuesta sea válida
          if (response && response.status === 200) {
            return response;
          }
          return null;
        },
      },
    ],
  }),
);

// No cachear videos de YouTube, pero mostrar un fallback si está offline
registerRoute(
  ({ request }) =>
    request.destination === 'video' && request.url.includes('youtube.com'),
  new NetworkOnly({
    cacheName: 'video-external-cache',
  }),
);

// Mostrar un fallback cuando no hay conexión
self.addEventListener('fetch', (event) => {
  if (
    event.request.destination === 'video' &&
    event.request.url.includes('youtube.com')
  ) {
    event.respondWith(
      fetch(event.request).catch(() => {
        return new Response(
          'Video no disponible sin conexión. Por favor, conéctese a Internet para ver este contenido.',
          { headers: { 'Content-Type': 'text/plain' } },
        );
      }),
    );
  }
});

// Cache other requests (e.g., API calls, etc.)
registerRoute(
  /.*/,
  new StaleWhileRevalidate({
    cacheName: 'all-resources-cache',
  }),
);

// Implementar Background Sync para cachear todo cuando el dispositivo vuelva a estar online
const bgSyncQueue = new Queue('resource-queue');

// Escucha los eventos fetch para añadir solicitudes a la cola si el dispositivo está offline
self.addEventListener('fetch', (event) => {
  if (!navigator.onLine) {
    event.respondWith(
      caches.match(event.request).then((cachedResponse) => {
        if (cachedResponse) {
          return cachedResponse; // Si está en caché, devuelve el recurso cacheado
        } else {
          // Si no está en caché, añade la solicitud a la cola de Background Sync
          bgSyncQueue.pushRequest({ request: event.request });
          return new Response(
            'Contenido no disponible offline y la solicitud se ha agregado para sincronización cuando vuelva a haber conexión.',
            { headers: { 'Content-Type': 'text/plain' } },
          );
        }
      }),
    );
  }
});

// Escuchar el evento de sincronización para recachear todos los recursos en la cola cuando esté online
self.addEventListener('sync', (event) => {
  if (event.tag === 'recache-everything') {
    event.waitUntil(recacheAllResources());
  }
});

// Función para recachear todos los recursos pendientes cuando el dispositivo vuelva a estar online
async function recacheAllResources() {
  const cache = await caches.open('dynamic-cache');
  const requests = await bgSyncQueue.replayRequests();

  await Promise.all(
    requests.map(async ({ request }) => {
      try {
        const response = await fetch(request);
        if (response.status === 200) {
          await cache.put(request, response);
        }
      } catch (error) {
        console.log('Error recacheando el recurso:', error);
      }
    }),
  );
}

// Registrar el evento de sincronización al perder la conexión
self.addEventListener('fetch', (event) => {
  if (!navigator.onLine && 'sync' in self.registration) {
    self.registration.sync.register('recache-everything').catch((err) => {
      console.error('Error al registrar la sincronización de fondo:', err);
    });
  }
});


// Función para verificar y mostrar los recordatorios para todas las citas
function checkReminder() {
  let citas = JSON.parse(localStorage.getItem('citas')) || [];
  const now = moment.tz('America/Mexico_City'); // Fecha y hora actuales en zona horaria de México
  
  // Usamos un nuevo array para almacenar las citas que aún no tienen recordatorio
  const updatedCitas = [];

  citas.forEach((cita) => {
    const citaDate = moment.tz(`${cita.fecha} ${cita.horario}`, 'YYYY-MM-DD HH:mm', 'America/Mexico_City');
    const reminderTime = citaDate.subtract(3, 'hours'); // 3 horas antes de la cita
    
    // Verifica si el recordatorio debe enviarse
    if (now.isSameOrAfter(reminderTime)) {
      self.registration.showNotification('Recordatorio de Cita', {
        body: `No olvides tu cita programada para mañana a las ${cita.horario}.`,
        icon: '/icon.png',
        tag: 'cita-reminder',
      });
    } else {
      // Si el recordatorio no se ha enviado, mantenemos la cita en el array actualizado
      updatedCitas.push(cita);
    }
  });

  // Vuelve a guardar las citas sin el recordatorio en localStorage
  localStorage.setItem('citas', JSON.stringify(updatedCitas));
}

// Verifica el recordatorio cada 15 minutos
setInterval(checkReminder, 900000); // 15 minutos


self.addEventListener('push', function (event) {
  const data = event.data.json();
  const options = {
    body: data.body,
    icon: '/icon.png',
    badge: '/badge.png',
  };

  event.waitUntil(self.registration.showNotification(data.title, options));
});


